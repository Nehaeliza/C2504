		9.  SQL Datatypes
		10.	SQL Commands (DDL, DML, TCL)
		11.	SQL Operator
		12.	SQL Table
		
		
		
 		
   SQL Datatypes
-------		-------
1. What are the different types of SQL datatypes?

* Numeric Data Types
* Character Strings
* Unicode Character Strings
* Date and Time
* Binary Data


2. Which are the Numeric Data Types?

a. `int`, `bigint`, `smallint`, `tinyint`  
- Use Case: Store integer values.
- `int`: 4 bytes, range from -2,147,483,648 to 2,147,483,647.
`bigint`: 8 bytes, range from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.  
- `smallint`: 2 bytes, range from -32,768 to 32,767.  
- `tinyint`: 1 byte, range from 0 to 255.

b. `decimal(p, s)`, `numeric(p, s)`  
- Use Case: Store fixed precision and scale numeric values.
- `decimal` and `numeric` are functionally equivalent.
- Example: `decimal(10, 2)` can store a number with up to 10 digits, 2 of which are after the decimal point.

c. `float(n)`, `real`  
- Use Case: Store floating-point numbers.
- `float`: 4 or 8 bytes, depending on the specified precision.
- `real`: 4 bytes.

 3. Which are the Character Strings?

a. `char(n)`, `varchar(n)`  
- Use Case: Store fixed-length (`char`) or variable-length (`varchar`) non-Unicode characters.
- `char(n)`: Fixed length, padded with spaces if necessary.
- `varchar(n)`: Variable length, up to `n` characters.

b. `text`  
- Use Case: Store large amounts of non-Unicode text data.
- Deprecated: Use `varchar(max)` instead.

 4. Unicode Character Strings

a. `nchar(n)`, `nvarchar(n)`  
- Use Case: Store fixed-length (`nchar`) or variable-length (`nvarchar`) Unicode characters.
- `nchar(n)`: Fixed length, padded with spaces if necessary.
- `nvarchar(n)`: Variable length, up to `n` characters.

b. `ntext`  
- Use Case: Store large amounts of Unicode text data.
- Deprecated: Use `nvarchar(max)` instead.

 5. Which are the Date and Time datatypes?

a. `date`  
- Use Case: Store dates only (year, month, day).

b. `time`  
- Use Case: Store time only (hour, minute, second, fractional seconds).

c. `datetime`, `smalldatetime`  
- Use Case: Store both date and time.
- `datetime`: From January 1, 1753, to December 31, 9999, with an accuracy of 3.33 milliseconds.
- `smalldatetime`: From January 1, 1900, to June 6, 2079, with an accuracy of 1 minute.

d. `datetime2`, `datetimeoffset`  
- Use Case: Store more precise date and time.
- `datetime2`: Greater precision than `datetime`, with an accuracy of 100 nanoseconds.
- `datetimeoffset`: Includes time zone offset.

 6. Which are the Binary Data types?

a. `binary(n)`, `varbinary(n)`  
- Use Case: Store fixed-length (`binary`) or variable-length (`varbinary`) binary data.
- `binary(n)`: Fixed length.
- `varbinary(n)`: Variable length.

b. `image`  
- Use Case: Store large binary data.
- Deprecated: Use `varbinary(max)` instead.

 7.  What are the Other Data Types in SQL?

a. `bit`  
- Use Case: Store 0, 1, or NULL (Boolean values).

b. `uniqueidentifier`  
- Use Case: Store globally unique identifiers (GUIDs).

c. `xml`  
- Use Case: Store XML data.

d. `sql_variant`  
- Use Case: Store values of various SQL Server-supported data types, except `text`, `ntext`, and `timestamp`.

e. `cursor`  
- Use Case: Store a reference to a cursor used in database operations.

f. `table`  
- Use Case: Store a result set for processing later in a stored procedure, function, or batch.

2. How can we Choose the Right Data Type ?

- Use `int`, `bigint`, `smallint`, `tinyint` for storing whole numbers, selecting the type based on the range of values.
- Use `decimal` or `numeric` for precise numerical values, especially when dealing with currency.
- Use `float` or `real` for approximate numerical values.
- Use `char` or `varchar` for non-Unicode character strings, with `varchar` preferred for variable-length strings.
- Use `nchar` or `nvarchar` for Unicode character strings.
- Use `date`, `time`, `datetime2`, or `datetimeoffset` for date and time data, choosing based on the required precision and time zone information.
- Use `binary` or `varbinary` for binary data.
- Use `bit` for Boolean values.
- Use `uniqueidentifier` for unique IDs.
- Use `xml` for XML data.
- Avoid deprecated types like `text`, `ntext`, and `image`; use their modern counterparts (`varchar(max)`, `nvarchar(max)`, `varbinary(max)`).

3. What are the benefits of carefully selecting data types?

you can optimize storage, 
improve performance, 
and ensure data integrity.



		SQL Commands (DDL, DML, TCL)
		---------        -----------
		
What are the SQL commands for DDL,DML,TCL?

 DDL - Data Definition Language : objects like table, view, procedure, trigger etc
        CREATE TABLE, CREATE PROCEDURE, CREATE VIEW 
        DROP TABLE
        ALTER TABLE 
        TRUCATE TABLE 
		
 DML - Data Manipulation Language : data 
        INSERT, UPDATE, DELETE 
        "SELECT" <- DQL - Data Query Language 
		
 TCL : Trasaction Control Language 
        Example:
            to make a order: bundle activities = it a single unit | ACID properties 
                insert into table:orders        1 row 
                insert into table:order_items   5 rows 
                                                6 rows total inserted 
                                                1 row update orders 
        commands: BEGIN TRANSACTION, COMMIT, ROLLBACK, SAVEPOINT
		
DCL: Data Control Language 
        GRANT the privileges to the db user 
        REVOKE the privileges from the db user 
		
		
		

				SQL Operator
				-----  -----
What are the SQL operators

 arithmetic operators->   +,-,*,/,%
 Relational operators->   =,<>,<,>,<=,>=,BETWEEN,NOT BETWEEN,IN,NOT IN,LIKE, NOT LIKE, IS NULL, NOT IS NULL
 Logical operators->  AND,OR,NOT,ALL,ANY,EXISTS
 
 
 Arithmetic Operators
 
 1. Addition (`+`)
   - Use Case: Add two numbers.
   - Example: `SELECT Salary + Bonus AS TotalCompensation FROM Employees;`
   - Explanation: This query returns the total compensation by adding the salary and bonus for each employee.

2. Subtraction (`-`)
   - Use Case: Subtract one number from another.
   - Example: `SELECT Price - Discount AS FinalPrice FROM Products;`
   - Explanation: This query returns the final price by subtracting the discount from the price for each product.

3. Multiplication (`*`)
   - Use Case: Multiply two numbers.
   - Example: `SELECT Quantity * UnitPrice AS TotalCost FROM OrderDetails;`
   - Explanation: This query returns the total cost by multiplying the quantity by the unit price for each order detail.

4. Division (`/`)
   - Use Case: Divide one number by another.
   - Example: `SELECT TotalAmount / NumberOfPayments AS AveragePayment FROM Payments;`
   - Explanation: This query returns the average payment by dividing the total amount by the number of payments.

5. Modulus (`%`)
   - Use Case: Return the remainder of a division operation.
   - Example: `SELECT EmployeeID % 2 AS IsOdd FROM Employees;`
   - Explanation: This query returns 1 if the EmployeeID is odd, and 0 if it is even.



 Relational Operators
 
1. Equals (`=`)
   - Use Case: Check if two values are equal.
   - Example: `SELECT * FROM Employees WHERE Age = 30;`

2. Not Equals (`<>` or `!=`)
   - Use Case: Check if two values are not equal.
   - Example: `SELECT * FROM Employees WHERE Age <> 30;`

3. Greater Than (`>`)
   - Use Case: Check if the value on the left is greater than the value on the right.
   - Example: `SELECT * FROM Employees WHERE Salary > 50000;`

4. Less Than (`<`)
   - Use Case: Check if the value on the left is less than the value on the right.
   - Example: `SELECT * FROM Employees WHERE Salary < 50000;`

5. Greater Than or Equal To (`>=`)
   - Use Case: Check if the value on the left is greater than or equal to the value on the right.
   - Example: `SELECT * FROM Employees WHERE Age >= 30;`

6. Less Than or Equal To (`<=`)
   - Use Case: Check if the value on the left is less than or equal to the value on the right.
   - Example: `SELECT * FROM Employees WHERE Age <= 30;`

7. BETWEEN
   - Use Case: Check if a value is within a specific range.
   - Example: `SELECT * FROM Employees WHERE Age BETWEEN 25 AND 35;`

8. NOT BETWEEN
   - Use Case: Check if a value is not within a specific range.
   - Example: `SELECT * FROM Employees WHERE Age NOT BETWEEN 25 AND 35;`

9. IN
   - Use Case: Check if a value is within a set of values.
   - Example: `SELECT * FROM Employees WHERE Department IN ('HR', 'Finance', 'IT');`

10. NOT IN
    - Use Case: Check if a value is not within a set of values.
    - Example: `SELECT * FROM Employees WHERE Department NOT IN ('HR', 'Finance', 'IT');`

11. LIKE
    - Use Case: Check if a value matches a specified pattern (commonly used with wildcard characters `%` and `_`).
    - Example: `SELECT * FROM Employees WHERE Name LIKE 'A%';` (Names starting with 'A')
    - Wildcard Characters:
        - `%` : Represents zero or more characters.
        - `_` : Represents a single character.
    
12. NOT LIKE
    - Use Case: Check if a value does not match a specified pattern.
    - Example: `SELECT * FROM Employees WHERE Name NOT LIKE 'A%';`

13. IS NULL
    - Use Case: Check if a value is NULL.
    - Example: `SELECT * FROM Employees WHERE ManagerID IS NULL;`

14. IS NOT NULL
    - Use Case: Check if a value is not NULL.
    - Example: `SELECT * FROM Employees WHERE ManagerID IS NOT NULL;`




 Logical operators
 
 1. AND
   - Use Case: Combine two or more conditions, where all conditions must be true.
   - Example: `SELECT * FROM Employees WHERE Age > 30 AND Department = 'IT';`
   - Explanation: This query returns employees who are older than 30 and work in the IT department.

2. OR
   - Use Case: Combine two or more conditions, where at least one condition must be true.
   - Example: `SELECT * FROM Employees WHERE Age < 25 OR Salary > 80000;`
   - Explanation: This query returns employees who are either younger than 25 or have a salary greater than 80,000.

3. NOT
   - Use Case: Negate a condition.
   - Example: `SELECT * FROM Employees WHERE NOT Department = 'HR';`
   - Explanation: This query returns employees who do not work in the HR department.

4. ALL
   - Use Case: Compare a value to all values in another result set.
   - Example: `SELECT * FROM Employees WHERE Salary > ALL (SELECT Salary FROM Employees WHERE Department = 'Sales');`
   - Explanation: This query returns employees whose salary is greater than every salary in the Sales department.

5. ANY
   - Use Case: Compare a value to any value in another result set.
   - Example: `SELECT * FROM Employees WHERE Salary > ANY (SELECT Salary FROM Employees WHERE Department = 'Sales');`
   - Explanation: This query returns employees whose salary is greater than at least one salary in the Sales department.

6. EXISTS
   - Use Case: Check for the existence of rows in a subquery.
   - Example: `SELECT * FROM Employees WHERE EXISTS (SELECT * FROM Projects WHERE Projects.EmployeeID = Employees.EmployeeID);`
   - Explanation: This query returns employees who are assigned to at least one project.

 

2. What is the Precedence of Logical Operators?

When multiple logical operators are used without parentheses, SQL Server evaluates them in the following order of precedence:

1. `NOT`
2. `AND`
3. `OR`

			SQL Table
			---- ----
			
table = definition of columns/fields and constraints 

How to create a table?

CREATE TABLE trainer (
	id integer primary key identity(1,1),
	name varchar(255) not null,
	skill varchar(512) not null,
	place varchar(126) not null
);

How to display rows of a table?

SELECT* FROM trainer;

How to insert values into table?

INSERT INTO trainer(name, skill, place) VALUES('mahesh', 'c#', 'mysore');




			


